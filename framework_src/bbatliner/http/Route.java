package bbatliner.http;

import java.io.PrintWriter;

/**
 * A wrapper to map an HTTP method to a path, a resource, and a handler.
 * @author Brendan Batliner
 *
 */
public class Route {
	
	private String method;
	private String path;
	private String resource;
	private RouteHandler handler;
	
	/**
	 * Construct a new route from the provided parameters.
	 * @param method The HTTP method of this route.
	 * @param path The path (requested resource) of this route.
	 * @param resource The resource to serve from this route.
	 */
	public Route(String method, String path, String resource, RouteHandler handler) {
		this.method = method;
		this.path = path;
		this.resource = resource;
		this.handler = handler;
	}
	
	/**
	 * Construct a new route from an existing one.
	 * @param route The Route to copy.
	 */
	public Route(Route route) {
		this.method = route.getMethod();
		this.path = route.getPath();
		this.resource = route.getResource();
		this.handler = route.getHandler();
	}
	
	/**
	 * Invoke the RouteHandler registered to this Route.
	 * @param p Any parameters associated with the specific request.
	 * @param out The PrintWriter this handler should write its HttpResponse to.
	 * @throws Exception Any generic exception that could be thrown by the handler.
	 * Calling methods should check for more specific exceptions depending on the handler used.
	 */
	public HttpResponse invokeHandler(HttpRequest request, PrintWriter out) throws Exception {
		return handler.handle(this, request, out);
	}

	public RouteHandler getHandler() {
		return handler;
	}

	public String getMethod() {
		return method;
	}

	public void setMethod(String method) {
		this.method = method;
	}

	public String getPath() {
		return path;
	}

	public void setPath(String path) {
		this.path = path;
	}

	public String getResource() {
		return resource;
	}

	public void setResource(String resource) {
		this.resource = resource;
	}
	
	// Generated by Eclipse
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((method == null) ? 0 : method.hashCode());
		result = prime * result + ((path == null) ? 0 : path.hashCode());
		result = prime * result + ((resource == null) ? 0 : resource.hashCode());
		return result;
	}

	// Generated by Eclipse
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Route other = (Route) obj;
		if (method == null) {
			if (other.method != null)
				return false;
		} else if (!method.equals(other.method))
			return false;
		if (path == null) {
			if (other.path != null)
				return false;
		} else if (!path.equals(other.path))
			return false;
		if (resource == null) {
			if (other.resource != null)
				return false;
		} else if (!resource.equals(other.resource))
			return false;
		return true;
	}
}
